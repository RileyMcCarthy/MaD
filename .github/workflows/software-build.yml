name: Build and Release Software

on:
  push:
    branches:
      - main
    paths:
      - 'Software/**'
    tags:
      - 'software-v*'
  pull_request:
    branches:
      - main
    paths:
      - 'Software/**'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
            arch: x64
          - os: macos-latest
            platform: mac
            arch: arm64
          - os: windows-latest
            platform: win
            arch: x64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: Software/MaDControl/package-lock.json

      - name: Install dependencies
        working-directory: Software/MaDControl
        run: npm install --legacy-peer-deps

      - name: Clean up existing symlinks
        working-directory: Software/MaDControl
        run: |
          # Remove existing symlinks that might cause conflicts
          if [ -L "src/node_modules" ]; then rm "src/node_modules"; fi
          if [ -L ".erb/node_modules" ]; then rm ".erb/node_modules"; fi
        shell: bash

      - name: Build
        working-directory: Software/MaDControl
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package
        working-directory: Software/MaDControl
        run: npm run package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_ARCH: ${{ matrix.arch }}
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            Software/MaDControl/release/build/*.AppImage
            Software/MaDControl/release/build/*.dmg
            Software/MaDControl/release/build/*.exe
            Software/MaDControl/release/build/*.zip
            Software/MaDControl/release/build/*.tar.gz
            Software/MaDControl/release/build/*.deb
            Software/MaDControl/release/build/*.rpm
            Software/MaDControl/release/build/*.snap
            Software/MaDControl/release/build/*.msi
            Software/MaDControl/release/build/*.nupkg
            Software/MaDControl/release/build/*.blockmap

  raspberry-pi:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv7l, arm64]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: Software/MaDControl/package-lock.json

      - name: Install system dependencies for cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Install dependencies
        working-directory: Software/MaDControl
        run: npm install --legacy-peer-deps

      - name: Clean up existing symlinks
        working-directory: Software/MaDControl
        run: |
          # Remove existing symlinks that might cause conflicts
          if [ -L "src/node_modules" ]; then rm "src/node_modules"; fi
          if [ -L ".erb/node_modules" ]; then rm ".erb/node_modules"; fi
        shell: bash

      - name: Set cross-compilation environment
        run: |
          echo "export ELECTRON_BUILDER_ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "export npm_config_arch=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "export npm_config_target_arch=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Rebuild native modules
        working-directory: Software/MaDControl
        run: |
          npm rebuild
          npm run rebuild
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}

      - name: Build
        working-directory: Software/MaDControl
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package
        working-directory: Software/MaDControl
        run: npm run package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_ARCH: ${{ matrix.arch }}
          PYTHONPATH: ${{ github.workspace }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: raspberry-pi-${{ matrix.arch }}
          path: |
            Software/MaDControl/release/build/*.AppImage
            Software/MaDControl/release/build/*.deb
            Software/MaDControl/release/build/*.tar.gz

  create-release:
    needs: [build, raspberry-pi]
    if: startsWith(github.ref, 'refs/tags/software-v')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/software-}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: MaD Software ${{ steps.get_version.outputs.VERSION }}
          tag_name: software-${{ steps.get_version.outputs.VERSION }}
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 