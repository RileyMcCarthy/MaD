name: Build MaD Documentation

on:
  push:
    branches: 
      - "main"
    tags:
      - 'docs-v*'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Docs/**'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check for documentation type
        id: check_docs
        run: |
          if [ -f "Docs/package.json" ]; then
            echo "type=nodejs" >> $GITHUB_OUTPUT
          elif [ -f "Docs/requirements.txt" ] || [ -f "Docs/conf.py" ]; then
            echo "type=sphinx" >> $GITHUB_OUTPUT
          elif [ -f "Docs/_config.yml" ]; then
            echo "type=jekyll" >> $GITHUB_OUTPUT
          elif find Docs -name "*.md" | head -1 | read; then
            echo "type=markdown" >> $GITHUB_OUTPUT
          else
            echo "type=static" >> $GITHUB_OUTPUT
          fi

      - name: Build Node.js docs
        if: steps.check_docs.outputs.type == 'nodejs'
        working-directory: Docs
        run: |
          npm install
          npm run build || npm run docs || echo "No build script found"

      - name: Build Sphinx docs
        if: steps.check_docs.outputs.type == 'sphinx'
        working-directory: Docs
        run: |
          pip install -r requirements.txt
          sphinx-build -b html . _build/html

      - name: Build Jekyll docs
        if: steps.check_docs.outputs.type == 'jekyll'
        working-directory: Docs
        run: |
          bundle install
          bundle exec jekyll build

      - name: Process Markdown docs
        if: steps.check_docs.outputs.type == 'markdown'
        run: |
          mkdir -p _site
          cp -r Docs/* _site/
          # Create a simple index.html if it doesn't exist
          if [ ! -f "_site/index.html" ] && [ -f "_site/README.md" ]; then
            echo "<html><head><title>Documentation</title></head><body>" > _site/index.html
            echo "<h1>Documentation</h1>" >> _site/index.html
            echo "<ul>" >> _site/index.html
            find _site -name "*.md" | while read file; do
              basename=$(basename "$file" .md)
              echo "<li><a href=\"$basename.html\">$basename</a></li>" >> _site/index.html
            done
            echo "</ul></body></html>" >> _site/index.html
          fi

      - name: Copy static docs
        if: steps.check_docs.outputs.type == 'static'
        run: |
          mkdir -p _site
          cp -r Docs/* _site/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ github.run_number }}
          path: |
            _site/
            Docs/_build/html/
            Docs/_site/

  create-release:
    needs: [build-docs]
    if: startsWith(github.ref, 'refs/tags/docs-v')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/docs-}" >> $GITHUB_OUTPUT

      - name: Create documentation archive
        run: |
          mkdir -p release
          cd artifacts
          tar -czf ../release/documentation-${{ steps.get_version.outputs.VERSION }}.tar.gz *

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: MaD Documentation ${{ steps.get_version.outputs.VERSION }}
          tag_name: docs-${{ steps.get_version.outputs.VERSION }}
          files: release/documentation-${{ steps.get_version.outputs.VERSION }}.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 