#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/MotionPlanning/MotionPlanning.c"
#line 1 "MotionPlanning.h"
#line 3 "MotionPlanning.h"
#line 1 "/home/mad/flexprop/include/stddef.h"
#line 4 "/home/mad/flexprop/include/stddef.h"
#line 1 "/home/mad/flexprop/include/sys/size_t.h"





  typedef  unsigned long  size_t;
#line 5 "/home/mad/flexprop/include/stddef.h"
#line 1 "/home/mad/flexprop/include/sys/null.h"
#line 6 "/home/mad/flexprop/include/stddef.h"
#line 1 "/home/mad/flexprop/include/sys/wchar_t.h"
#line 15 "/home/mad/flexprop/include/sys/wchar_t.h"
typedef int wchar_t;
#line 24 "/home/mad/flexprop/include/sys/wchar_t.h"
typedef struct _Mbstate {
  unsigned int total:5;
  unsigned int left:5;
  unsigned int partial:22;
} _Mbstate_t;
#line 7 "/home/mad/flexprop/include/stddef.h"

typedef long ptrdiff_t;
#line 4 "MotionPlanning.h"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/JSON/JSON.h"
#line 17 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/JSON/JSON.h"
typedef struct MachineConfiguration
{
    char motorType[ 20 ];
    double maxMotorTorque;
    double maxMotorRPM;
    double gearDiameter;
    double gearPitch;
    double systemIntertia;
    double staticTorque;
    double load;
    char positionEncoderType[ 20 ];
    double positionEncoderStepsPerRev;
    char forceGauge[ 20 ];
    double forceGaugeScaleFactor;
    int forceGaugeZeroFactor;
} MachineConfiguration;

typedef struct MachinePerformance
{
    double minPosition;
    double maxPosition;
    double maxVelocity;
    double maxAcceleration;
    double maxForceTensile;
    double maxForceCompression;
    double forceGaugeNeutralOffset;
} MachinePerformance;

typedef struct MachineProfile
{
    char name[ 20 ];
    MachineConfiguration configuration;
    MachinePerformance performance;
} MachineProfile;

typedef struct SampleProfile
{
    char name[ 50 ];
    double length;
    double stretchMax;
    double maxVelocity;
    double maxAcceleration;
    double maxJerk;
    double maxForceTensile;
    double maxForceCompression;

} SampleProfile;
#line 5 "MotionPlanning.h"
#line 1 "/home/mad/flexprop/include/math.h"
#line 4 "/home/mad/flexprop/include/math.h"
#line 1 "/home/mad/flexprop/include/compiler.h"
#line 5 "/home/mad/flexprop/include/math.h"
#line 77 "/home/mad/flexprop/include/math.h"
typedef float float_t;
typedef double double_t;
#line 6 "MotionPlanning.h"
#line 1 "/home/mad/flexprop/include/stdbool.h"
#line 7 "MotionPlanning.h"

typedef struct motionPeriods_s
{
    double x_goal;
    double x0;
    double v0;
    double v_max;
    double a_max;
    double T1;
    double T2;
    double T3;
    double a_acc;
    double a_dec;
    double v;
} MotionPeriod;

typedef struct setPoint_s
{
    double t;
    double x;
    double v;
    double a;
} SetPoint;

double steps_to_mm(int steps, MachineConfiguration *config);
int steps_to_um(int steps, MachineConfiguration *config);
int mm_to_steps(double mm, MachineConfiguration *config);
#line 2 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/MotionPlanning/MotionPlanning.c"


static double position(double t, double xi, double vi, double a)
{
    return (xi + vi * t + 0.5 * a *  __builtin_powf(t, 2) );
}

static double velocity(double t, double vi, double a)
{
    return (vi + a * t);
}

double steps_to_mm(int steps, MachineConfiguration *config)
{
    if (config ==  (0) )
    {

        return 0;
    }
    return steps * (config->gearDiameter * 3.14159) / config->positionEncoderStepsPerRev;
}

int steps_to_um(int steps, MachineConfiguration *config)
{
    if (config ==  (0) )
    {

        return 0;
    }
    return (int) __builtin_round(steps * (config->gearDiameter * 3.14159) / config->positionEncoderStepsPerRev * 1000) ;
}

int mm_to_steps(double mm, MachineConfiguration *config)
{
    if (config ==  (0) )
    {

        return 0;
    }
    return (int) __builtin_round(mm * (double)config->positionEncoderStepsPerRev / (double)(config->gearDiameter * 3.14159)) ;
}
