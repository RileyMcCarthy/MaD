#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/MCP23017/MCP23017.c"
#line 1 "MCP23017.h"
#line 4 "MCP23017.h"
#line 1 "/home/mad/flexprop/include/stdbool.h"
#line 5 "MCP23017.h"
#line 1 "/home/mad/flexprop/include/stdlib.h"
#line 4 "/home/mad/flexprop/include/stdlib.h"
#line 1 "/home/mad/flexprop/include/compiler.h"
#line 5 "/home/mad/flexprop/include/stdlib.h"
#line 1 "/home/mad/flexprop/include/sys/size_t.h"





  typedef  unsigned long  size_t;
#line 6 "/home/mad/flexprop/include/stdlib.h"
#line 1 "/home/mad/flexprop/include/sys/wchar_t.h"
#line 15 "/home/mad/flexprop/include/sys/wchar_t.h"
typedef int wchar_t;
#line 24 "/home/mad/flexprop/include/sys/wchar_t.h"
typedef struct _Mbstate {
  unsigned int total:5;
  unsigned int left:5;
  unsigned int partial:22;
} _Mbstate_t;
#line 7 "/home/mad/flexprop/include/stdlib.h"
#line 1 "/home/mad/flexprop/include/sys/null.h"
#line 8 "/home/mad/flexprop/include/stdlib.h"
#line 22 "/home/mad/flexprop/include/stdlib.h"
    double atof(const char *);
    int atoi(const char *)  __fromfile("libc/stdlib/atoi.c") ;
    long atol(const char *)  __fromfile("libc/stdlib/atoi.c") ;
    long long atoll(const char *);

  long double strtold(const char *nptr, char **endptr);
  double strtod(const char *nptr, char **endptr);
  float strtof(const char *nptr, char **endptr);

    long strtol(const char *nptr, char **endptr, int base)  __fromfile("libc/stdlib/strtol.c") ;
    unsigned long strtoul(const char *nptr, char **endptr, int base)  __fromfile("libc/stdlib/strtoul.c") ;
  long long strtoll(const char *nptr, char **endptr, int base);
  unsigned long long strtoull(const char *nptr, char **endptr, int base);


    int rand(void)  __fromfile("libc/stdlib/rand.c") ;
    void srand(unsigned int seed)  __fromfile("libc/stdlib/rand.c") ;

    void *malloc(size_t n)  __fromfile("libc/stdlib/malloc.c") ;
    void *calloc(size_t, size_t)  __fromfile("libc/stdlib/malloc.c") ;
    void *realloc(void *, size_t)  __fromfile("libc/stdlib/malloc.c") ;
    void free(void *)  __fromfile("libc/stdlib/malloc.c") ;


    int atexit(void (*func)(void))  __fromfile("libc/stdlib/exit.c") ;
     void exit(int status)  __fromfile("libc/stdlib/exit.c") ;
     void abort(void)  __fromfile("libc/stdlib/abort.c") ;
     void _Exit(int status)  __fromfile("libc/stdlib/_Exit.c") ;
   void _exit(int status);
#line 56 "/home/mad/flexprop/include/stdlib.h"
   long labs(long l);


   long long llabs(long long ll);


  typedef struct {
    int quot, rem;
  } div_t;

  typedef struct {
    long int quot, rem;
  } ldiv_t;

  typedef struct {
    long long quot, rem;
  } lldiv_t;

  div_t div(int num, int denom);
  ldiv_t ldiv(long num, long denom);
  lldiv_t lldiv(long long num, long long denom);

    void qsort(void *base, size_t nmemb, size_t size, int (*compare)(const void *, const void *))  __fromfile("libc/stdlib/qsort.c") ;
  void *bsearch(const void *key, const void *base, size_t nmemb, size_t size,
		int (*compare)(const void *, const void *));

    char *getenv(const char *name)  __fromfile("libc/stdlib/getenv.c") ;
    int putenv(const char *name)  __fromfile("libc/stdlib/putenv.c") ;


  extern int _mb_cur_max;



  int mblen(const char *s, size_t n);
  int mbtowc(wchar_t * __restrict pwc, const char * __restrict s, size_t n);
  size_t mbstowcs(wchar_t *dest, const char *src, size_t n);


  int system(const char *command);
#line 102 "/home/mad/flexprop/include/stdlib.h"
    int _itoa_prec( unsigned int x, char *buf, unsigned base, int prec );
    int _lltoa_prec( unsigned long long x, char *buf, unsigned base, int prec );
#line 6 "MCP23017.h"
#line 1 "/home/mad/flexprop/include/stdint.h"



typedef signed char int8_t;
typedef unsigned char uint8_t;

typedef signed short int16_t;
typedef unsigned short uint16_t;

typedef signed long int32_t;
typedef unsigned long uint32_t;

typedef long long int64_t;
typedef unsigned long long uint64_t;

typedef unsigned long uintptr_t;
typedef long intptr_t;

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;

typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;

typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;

typedef int32_t int_fast8_t;
typedef int32_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;

typedef uint32_t uint_fast8_t;
typedef uint32_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
#line 7 "MCP23017.h"
#line 20 "MCP23017.h"
typedef struct __using("lib/Protocol/jm_i2c.spin2") I2CBus;
typedef struct MCP23017_t
{
    I2CBus i2cBus;
    uint8_t writeAddr, readAddr;
    uint8_t dira, dirb;
} MCP23017;

_Bool  mcp23017_begin(MCP23017 *mcp23017, uint8_t addr, int sda, int scl);
void mcp_update_register(MCP23017 *mcp23017);
#line 37 "MCP23017.h"
void mcp_set_direction(MCP23017 *mcp23017, uint16_t pin, uint8_t reg, uint8_t direction);
uint8_t mcp_get_direction(MCP23017 *mcp23017, uint16_t pin, uint8_t reg);

void mcp_set_pin(MCP23017 *mcp23017, uint16_t pin, uint8_t reg, uint8_t output);
uint8_t mcp_get_pin(MCP23017 *mcp23017, uint16_t pin, uint8_t reg);

void mcp_set_pullup(MCP23017 *mcp23017, uint16_t pin, uint8_t reg, uint8_t output);
uint8_t mcp_get_pullup(MCP23017 *mcp23017, uint16_t pin, uint8_t reg);
#line 2 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/MCP23017/MCP23017.c"
#line 16 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/MCP23017/MCP23017.c"
static uint8_t read_register(MCP23017 *mcp23017, uint8_t addr)
{
    uint8_t rdata = 0xFF;

    mcp23017->i2cBus.start();
    mcp23017->i2cBus.write(mcp23017->writeAddr);
    mcp23017->i2cBus.write(addr);
    mcp23017->i2cBus.start();
    mcp23017->i2cBus.write(mcp23017->readAddr);
    rdata = mcp23017->i2cBus.read(1);
    mcp23017->i2cBus.stop();
    return rdata;
}

static  _Bool  write_register(MCP23017 *mcp23017, uint8_t addr, uint8_t value)
{
    int ack = 0;

    mcp23017->i2cBus.start();
    ack = mcp23017->i2cBus.write(mcp23017->writeAddr);
    mcp23017->i2cBus.write(addr);
    mcp23017->i2cBus.write(value);
    mcp23017->i2cBus.stop();
    return ack == 0;
}
#line 49 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/MCP23017/MCP23017.c"
_Bool  mcp23017_begin(MCP23017 *mcp23017, uint8_t addr, int sda, int scl)
{
    mcp23017->i2cBus.setup(scl, sda, 100, 1);
    mcp23017->writeAddr = ((0x20 | addr) << 1) & 0b11111110;
    mcp23017->readAddr = ((0x20 | addr) << 1) | 0b00000001;
    int DIRAVALUE = 0b00001111;
    int DIRBVALUE = 0xFF;

    _Bool  ack =  (0) ;
    ack = write_register(mcp23017,  0x00 , DIRAVALUE);
    ack &= write_register(mcp23017,  0x01 , DIRBVALUE);
    if (read_register(mcp23017,  0x00 ) != DIRAVALUE || read_register(mcp23017,  0x01 ) != DIRBVALUE)
    {
        printf("Error setting up MCP23017: ACK:%d\n", ack);
        return  (0) ;
    }
    return  (1) ;
}

void mcp_update_register(MCP23017 *mcp23017)
{
    mcp23017->dira = read_register(mcp23017,  0x12 );
    mcp23017->dirb = read_register(mcp23017,  0x13 );
}

void mcp_set_direction(MCP23017 *mcp23017, uint16_t pin, uint8_t reg, uint8_t direction)
{
    if (reg ==  0x00 )
    {
        reg =  0x00 ;
    }
    else
    {
        reg =  0x01 ;
    }
    int value = read_register(mcp23017, reg);
    (direction ? ((value) |= (1UL << (pin))) : ((value) &= ~(1UL << (pin))) ) ;
    write_register(mcp23017, reg, value);
}

uint8_t mcp_get_direction(MCP23017 *mcp23017, uint16_t pin, uint8_t reg)
{
    if (reg ==  0x00 )
    {
        return  (((mcp23017->dira) >> (pin)) & 0x01) ;
    }
    else
    {
        return  (((mcp23017->dirb) >> (pin)) & 0x01) ;
    }
}

void mcp_set_pin(MCP23017 *mcp23017, uint16_t pin, uint8_t reg, uint8_t state)
{

    if (reg ==  0x00 )
    {
        reg =  0x12 ;
    }
    else
    {
        reg =  0x13 ;
    }
    int value = read_register(mcp23017, reg);
    (state ? ((value) |= (1UL << (pin))) : ((value) &= ~(1UL << (pin))) ) ;
    write_register(mcp23017, reg, value);
}
uint8_t mcp_get_pin(MCP23017 *mcp23017, uint16_t pin, uint8_t reg)
{
    return  (((reg == 0x00 ? mcp23017->dira : mcp23017->dirb) >> (pin)) & 0x01) ;
}

void mcp_set_pullup(MCP23017 *mcp23017, uint16_t pin, uint8_t reg, uint8_t state)
{
    if (reg ==  0x00 )
    {
        reg =  0x02 ;
    }
    else
    {
        reg =  0x03 ;
    }
    int value = read_register(mcp23017, reg);
    (state ? ((value) |= (1UL << (pin))) : ((value) &= ~(1UL << (pin))) ) ;
    write_register(mcp23017, reg, value);
}
uint8_t mcp_get_pullup(MCP23017 *mcp23017, uint16_t pin, uint8_t reg)
{
    if (reg ==  0x00 )
    {
        reg =  0x02 ;
    }
    else
    {
        reg =  0x03 ;
    }
    return  (((read_register(mcp23017, reg)) >> (pin)) & 0x01) ;
}
