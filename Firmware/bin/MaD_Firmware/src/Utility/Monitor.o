#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Monitor.h"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/ForceGauge/ForceGauge.h"
#line 4 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/ForceGauge/ForceGauge.h"
#line 1 "/home/mad/flexprop/include/stdlib.h"
#line 4 "/home/mad/flexprop/include/stdlib.h"
#line 1 "/home/mad/flexprop/include/compiler.h"
#line 5 "/home/mad/flexprop/include/stdlib.h"
#line 1 "/home/mad/flexprop/include/sys/size_t.h"





  typedef  unsigned long  size_t;
#line 6 "/home/mad/flexprop/include/stdlib.h"
#line 1 "/home/mad/flexprop/include/sys/wchar_t.h"
#line 15 "/home/mad/flexprop/include/sys/wchar_t.h"
typedef int wchar_t;
#line 24 "/home/mad/flexprop/include/sys/wchar_t.h"
typedef struct _Mbstate {
  unsigned int total:5;
  unsigned int left:5;
  unsigned int partial:22;
} _Mbstate_t;
#line 7 "/home/mad/flexprop/include/stdlib.h"
#line 1 "/home/mad/flexprop/include/sys/null.h"
#line 8 "/home/mad/flexprop/include/stdlib.h"
#line 22 "/home/mad/flexprop/include/stdlib.h"
    double atof(const char *);
    int atoi(const char *)  __fromfile("libc/stdlib/atoi.c") ;
    long atol(const char *)  __fromfile("libc/stdlib/atoi.c") ;
    long long atoll(const char *);

  long double strtold(const char *nptr, char **endptr);
  double strtod(const char *nptr, char **endptr);
  float strtof(const char *nptr, char **endptr);

    long strtol(const char *nptr, char **endptr, int base)  __fromfile("libc/stdlib/strtol.c") ;
    unsigned long strtoul(const char *nptr, char **endptr, int base)  __fromfile("libc/stdlib/strtoul.c") ;
  long long strtoll(const char *nptr, char **endptr, int base);
  unsigned long long strtoull(const char *nptr, char **endptr, int base);


    int rand(void)  __fromfile("libc/stdlib/rand.c") ;
    void srand(unsigned int seed)  __fromfile("libc/stdlib/rand.c") ;

    void *malloc(size_t n)  __fromfile("libc/stdlib/malloc.c") ;
    void *calloc(size_t, size_t)  __fromfile("libc/stdlib/malloc.c") ;
    void *realloc(void *, size_t)  __fromfile("libc/stdlib/malloc.c") ;
    void free(void *)  __fromfile("libc/stdlib/malloc.c") ;


    int atexit(void (*func)(void))  __fromfile("libc/stdlib/exit.c") ;
     void exit(int status)  __fromfile("libc/stdlib/exit.c") ;
     void abort(void)  __fromfile("libc/stdlib/abort.c") ;
     void _Exit(int status)  __fromfile("libc/stdlib/_Exit.c") ;
   void _exit(int status);
#line 56 "/home/mad/flexprop/include/stdlib.h"
   long labs(long l);


   long long llabs(long long ll);


  typedef struct {
    int quot, rem;
  } div_t;

  typedef struct {
    long int quot, rem;
  } ldiv_t;

  typedef struct {
    long long quot, rem;
  } lldiv_t;

  div_t div(int num, int denom);
  ldiv_t ldiv(long num, long denom);
  lldiv_t lldiv(long long num, long long denom);

    void qsort(void *base, size_t nmemb, size_t size, int (*compare)(const void *, const void *))  __fromfile("libc/stdlib/qsort.c") ;
  void *bsearch(const void *key, const void *base, size_t nmemb, size_t size,
		int (*compare)(const void *, const void *));

    char *getenv(const char *name)  __fromfile("libc/stdlib/getenv.c") ;
    int putenv(const char *name)  __fromfile("libc/stdlib/putenv.c") ;


  extern int _mb_cur_max;



  int mblen(const char *s, size_t n);
  int mbtowc(wchar_t * __restrict pwc, const char * __restrict s, size_t n);
  size_t mbstowcs(wchar_t *dest, const char *src, size_t n);


  int system(const char *command);
#line 102 "/home/mad/flexprop/include/stdlib.h"
    int _itoa_prec( unsigned int x, char *buf, unsigned base, int prec );
    int _lltoa_prec( unsigned long long x, char *buf, unsigned base, int prec );
#line 5 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/ForceGauge/ForceGauge.h"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/JSON/JSON.h"
#line 17 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/JSON/JSON.h"
typedef struct MachineConfiguration
{
    char motorType[ 20 ];
    double maxMotorTorque;
    double maxMotorRPM;
    double gearDiameter;
    double gearPitch;
    double systemIntertia;
    double staticTorque;
    double load;
    char positionEncoderType[ 20 ];
    double positionEncoderStepsPerRev;
    char forceGauge[ 20 ];
    double forceGaugeScaleFactor;
    int forceGaugeZeroFactor;
} MachineConfiguration;

typedef struct MachinePerformance
{
    double minPosition;
    double maxPosition;
    double maxVelocity;
    double maxAcceleration;
    double maxForceTensile;
    double maxForceCompression;
    double forceGaugeNeutralOffset;
} MachinePerformance;

typedef struct MachineProfile
{
    char name[ 20 ];
    MachineConfiguration configuration;
    MachinePerformance performance;
} MachineProfile;

typedef struct SampleProfile
{
    char name[ 50 ];
    double length;
    double stretchMax;
    double maxVelocity;
    double maxAcceleration;
    double maxJerk;
    double maxForceTensile;
    double maxForceCompression;

} SampleProfile;
#line 6 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/ForceGauge/ForceGauge.h"
#line 1 "/home/mad/flexprop/include/stdbool.h"
#line 7 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/ForceGauge/ForceGauge.h"
#line 1 "/home/mad/flexprop/include/stdint.h"



typedef signed char int8_t;
typedef unsigned char uint8_t;

typedef signed short int16_t;
typedef unsigned short uint16_t;

typedef signed long int32_t;
typedef unsigned long uint32_t;

typedef long long int64_t;
typedef unsigned long long uint64_t;

typedef unsigned long uintptr_t;
typedef long intptr_t;

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;

typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;

typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;

typedef int32_t int_fast8_t;
typedef int32_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;

typedef uint32_t uint_fast8_t;
typedef uint32_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
#line 8 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/ForceGauge/ForceGauge.h"






typedef struct __using("lib/Protocol/jm_fullduplexserial.spin2") FDS;

typedef struct ForceGauge_s
{
    int counter;
    unsigned int force;
    uint8_t buffer[4];
    FDS serial;
    int rx, tx;
    int forceRaw;
    _Bool  responding;
    int cogid;
} ForceGauge;

int force_gauge_raw_to_force(int zero, double slope, int raw);
int raw_to_force(int raw, MachineConfiguration *configuration);

_Bool  force_gauge_begin(ForceGauge *forceGauge, int rx, int tx);
void force_gauge_stop(ForceGauge *forceGauge);
#line 2 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Monitor.h"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/StateMachine.h"
#line 3 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/StateMachine.h"
#line 1 "/home/mad/flexprop/include/stdbool.h"
#line 4 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/StateMachine.h"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/StateMachineDefinition.h"
#line 1 "/home/mad/flexprop/include/stdbool.h"
#line 2 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/StateMachineDefinition.h"

typedef enum State
{
    STATE_SELFCHECK,
    STATE_MACHINECHECK,
    STATE_MOTION
} State;

typedef enum MotionStatus
{
    MOTIONSTATUS_DISABLED,
    MOTIONSTATUS_ENABLED,
    MOTIONSTATUS_SAMPLE_LIMIT,
    MOTIONSTATUS_MACHINE_LIMIT,
    MOTIONSTATUS_FAULTED
} MotionStatus;

typedef enum MotionOverTravel
{
    MOTION_LIMIT_OK,
    MOTION_LIMIT_UPPER,
    MOTION_LIMIT_LOWER
} MotionOverTravel;
#line 30 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/StateMachineDefinition.h"
typedef enum MotionCondition
{
    CONDITION_LENGTH,
    CONDITION_FORCE,
    CONDITION_TENSION,
    CONDITION_COMPRESSION,
    CONDITION_UPPER,
    CONDITION_LOWER,
    CONDITION_DOOR,
    CONDITION_STOPPED,
    CONDITION_MOVING,
} MotionCondition;

typedef enum MotionMode
{
    MODE_MANUAL,
    MODE_TEST,
    MODE_TEST_RUNNING
} MotionMode;

typedef enum ModeFunctions
{
    FUNC_MANUAL_OFF,
    FUNC_MANUAL_INCREMENTAL_JOG,
    FUNC_MANUAL_CONTINUOUS_JOG,
    FUNC_MANUAL_POSITIONAL_MOVE,
    FUNC_MANUAL_HOME,
    FUNC_MANUAL_MOVE_GAUGE_LENGTH,
    FUNC_MANUAL_MOVE_FORCE,
    FUNC_TEST_LOAD,
    FUNC_TEST_RUN,
    FUNC_TEST_STOP,
    FUNC_TEST_TOGGLE_HOLD_RESUME
} ModeFunctions;

typedef struct SelfCheckParameters
{
    _Bool  chargePump;
} SelfCheckParameters;

typedef struct MachineCheckParameters
{
    _Bool  switchedPower;
    MotionOverTravel esdTravelLimit;
    _Bool  esdSwitch;
    _Bool  servoOK;
    _Bool  forceGaugeCom;
    _Bool  servoCom;
    _Bool  rtcCom;

} MachineCheckParameters;

typedef struct MotionParameters
{
    MotionStatus status;
    MotionCondition condition;
    MotionMode mode;
} MotionParameters;


typedef struct MachineState
{
    State state;
    SelfCheckParameters selfCheckParameters;
    MachineCheckParameters machineCheckParameters;
    MotionParameters motionParameters;
    ModeFunctions _function;
    int _functionData;
    int _lock;
} MachineState;

typedef enum Parameter
{
    PARAM_SELF_CHARGE_PUMP,
    PARAM_MACHINE_SWITCHED_POWER,
    PARAM_MACHINE_ESD_TRAVEL_LIMIT,
    PARAM_MACHINE_ESD_SWITCH,
    PARAM_MACHINE_SERVO_OK,
    PARAM_MACHINE_FORCE_GAUGE_COM,
    PARAM_MACHINE_SERVO_COM,
    PARAM_MACHINE_RTC_COM,
    PARAM_MOTION_STATUS,
    PARAM_MOTION_CONDITION,
    PARAM_MOTION_MODE,
    PARAM_FUNCTION
} Parameter;
#line 5 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/StateMachine.h"

MachineState *machine_state_create();


void machine_state_init(MachineState *machineState);
void state_machine_set(MachineState *machineState, Parameter param, int state);
_Bool  state_machine_self_check_equal(SelfCheckParameters *selfCheckParameters1, SelfCheckParameters *selfCheckParameters2);
_Bool  state_machine_check_equal(MachineCheckParameters *motionParameters1, MachineCheckParameters *motionParameters2);
_Bool  state_machine_motion_equal(MotionParameters *motionParameters1, MotionParameters *motionParameters2);
_Bool  state_machine_equal(MachineState *machineState1, MachineState *machineState2);
#line 3 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Monitor.h"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/Encoder/Encoder.h"


typedef struct __using("lib/Encoder/jm_quadrature.spin2") Encoder;
#line 4 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Monitor.h"
#line 1 "/home/mad/flexprop/include/stdint.h"
#line 5 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Monitor.h"
typedef struct MonitorData
{
    int forceRaw;
    int encoderRaw;
    int forcemN;
    int encoderum;
    double force;
    double position;
    int setpoint;
    unsigned int timems;
    unsigned int timeus;
    int log;
} MonitorData;


typedef struct MonitorDataPacket
{
    int forcemN;
    int encoderum;
    int setpointum;
    unsigned int timeus;
    int log;
} MonitorDataPacket;

typedef struct Monitor
{
    MonitorData data;
    MachineState *machineState;
    MachineConfiguration *configuration;
    int sampleRate;
    int cogid;

    MonitorData cache;
    int cacheLock;
} Monitor;
void monitor_sync_setpoint();
void monitor_set_address(int addr);
MonitorData *monitor_read_data();
_Bool  monitor_begin(Monitor *monitor, MachineState *machineState, MachineConfiguration *configuration, int sampleRate);


_Bool  read_sd_profile(MachineProfile * profile);
int read_sd_card_data(MonitorData *data, int index, int count);
int read_data_size();
_Bool  write_sd_profile(MachineProfile * profile);
#line 2 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/IOBoard.h"
#line 3 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/ForceGauge/ForceGauge.h"
#line 4 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/Encoder/Encoder.h"
#line 5 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"
#line 1 "/home/mad/flexprop/include/stdbool.h"
#line 6 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"
#line 1 "/home/mad/flexprop/include/simpletools.h"
#line 9 "/home/mad/flexprop/include/simpletools.h"
#line 1 "/home/mad/flexprop/include/propeller2.h"
#line 4 "/home/mad/flexprop/include/propeller2.h"
#line 1 "/home/mad/flexprop/include/stdint.h"
#line 5 "/home/mad/flexprop/include/propeller2.h"
#line 56 "/home/mad/flexprop/include/propeller2.h"
typedef struct _cartesian {
   int32_t x, y;
} cartesian_t;


typedef struct _polar {
   uint32_t r, t;
} polar_t;


typedef struct _counter64 {
    uint32_t low, high;
} counter64_t;
#line 96 "/home/mad/flexprop/include/propeller2.h"
void _clkset(uint32_t clkmode, uint32_t clkfreq);
void _hubset(uint32_t val);
void _reboot(void);


int _coginit(int cog, void *pgm, void *ptr);
#line 116 "/home/mad/flexprop/include/propeller2.h"
void _cogstop(int cog);
int _cogchk(int cog);
int _cogid(void);

int _locknew(void);
void _lockret(int lock);

int _locktry(int lock);
int _lockrel(int lock);
int _lockchk(int lock);

void _cogatn(uint32_t mask);
int _pollatn(void);
int _waitatn(void);


cartesian_t _rotxy(cartesian_t coord, uint32_t t);
cartesian_t _polxy(polar_t coord);
polar_t _xypol(cartesian_t coord);


uint32_t _rnd(void);


int _clz(uint32_t val);
int _encod(uint32_t val);
uint32_t _isqrt(uint32_t val);


uint32_t _cnt(void);
uint32_t _cnth(void);
counter64_t _cnthl();
uint32_t _getsec();
uint32_t _getms();
uint32_t _getus();

uint32_t _pollcnt(uint32_t tick);
void _waitcnt(uint32_t tick);

void _waitx(uint32_t cycles);
void _waitsec(uint32_t seconds);
void _waitms(uint32_t milliseconds);
void _waitus(uint32_t microseconds);


void _pinw(int pin, int val);
void _pinl(int pin);
void _pinh(int pin);
void _pinnot(int pin);
void _pinrnd(int pin);
void _pinf(int pin);
int _pinr(int pin);


void _wrpin(int pin, uint32_t val);
void _wxpin(int pin, uint32_t val);
void _wypin(int pin, uint32_t val);
void _akpin(int pin);
uint32_t _rdpin(int pin);
uint32_t _rqpin(int pin);


void _pinstart(int pin, uint32_t mode, uint32_t xval, uint32_t yval);

void _pinclear(int pin);


extern uint32_t _clockfreq(void);
extern uint32_t _clockmode(void);
#line 10 "/home/mad/flexprop/include/simpletools.h"
#line 16 "/home/mad/flexprop/include/simpletools.h"
#line 1 "/home/mad/flexprop/include/libsimpletext/simpletext.h"
#line 3 "/home/mad/flexprop/include/libsimpletext/simpletext.h"
#line 1 "/home/mad/flexprop/include/stdarg.h"
#line 4 "/home/mad/flexprop/include/libsimpletext/simpletext.h"
#line 12 "/home/mad/flexprop/include/libsimpletext/simpletext.h"
typedef struct text_struct
{

  int (*rxChar)(struct text_struct *p);

  int (*txChar)(struct text_struct *p, int ch);

  int cogid[ 7 ];

  volatile void *devst;

  volatile int terminalEcho;




  volatile char ecA;
  volatile char ecB;
  volatile char ecsA;
  volatile char ecsB;
} text_t;

char *_safe_gets(text_t *text, char *buf, int count)  __fromfile("libsimpletext/safe_gets.c") ;
char *getStr(char *buf, int max)  __fromfile("libsimpletext/getStr.c") ;

float string2float(char *s, char **end)  __fromfile("libsimpletext/stringToFloat.c") ;
int _doscanf(const char *str, const char *fmt,  unsigned long  args)  __fromfile("libsimpletext/doscanf.c") ;

const char* _scanf_getl(const char *str, int *dst, int base, unsigned width, int isSigned)  __fromfile("libsimpletext/scanf_getl.c") ;
const char* _scanf_getf(const char *str, float *dst)  __fromfile("libsimpletext/scanf_getf.c") ;

int scan(const char *fmt, ...)  __fromfile("libsimpletext/scan.c") ;
#line 17 "/home/mad/flexprop/include/simpletools.h"
#line 1 "/home/mad/flexprop/include/simplei2c.h"
#line 21 "/home/mad/flexprop/include/simplei2c.h"
#line 1 "/home/mad/flexprop/include/propeller2.h"
#line 22 "/home/mad/flexprop/include/simplei2c.h"
#line 26 "/home/mad/flexprop/include/simplei2c.h"
typedef struct i2c_st
{
  int scl_pin;
  int sda_pin;
  int drivescl;
} i2c;
#line 46 "/home/mad/flexprop/include/simplei2c.h"
i2c *i2c_open(i2c *bus, int sclPin, int sdaPin, int sclDrive) __fromfile("libsimplei2c/simplei2c.c");
#line 53 "/home/mad/flexprop/include/simplei2c.h"
void i2c_start(i2c *bus) __fromfile("libsimplei2c/simplei2c.c");
#line 60 "/home/mad/flexprop/include/simplei2c.h"
void i2c_stop(i2c *bus) __fromfile("libsimplei2c/simplei2c.c");
#line 72 "/home/mad/flexprop/include/simplei2c.h"
int i2c_writeByte(i2c *bus, int byte) __fromfile("libsimplei2c/simplei2c.c");
#line 83 "/home/mad/flexprop/include/simplei2c.h"
int i2c_readByte(i2c *bus, int ackState) __fromfile("libsimplei2c/simplei2c.c");
#line 97 "/home/mad/flexprop/include/simplei2c.h"
int i2c_writeData(i2c *bus, const unsigned char *data, int count) __fromfile("libsimplei2c/simplei2c.c");
#line 112 "/home/mad/flexprop/include/simplei2c.h"
int i2c_readData(i2c *bus, unsigned char *data, int count) __fromfile("libsimplei2c/simplei2c.c");
#line 123 "/home/mad/flexprop/include/simplei2c.h"
int i2c_poll(i2c *bus, int addr) __fromfile("libsimplei2c/simplei2c.c");
#line 18 "/home/mad/flexprop/include/simpletools.h"
#line 30 "/home/mad/flexprop/include/simpletools.h"
int input(int pin)  __fromfile("libsimpletools/input.c") ;
#line 45 "/home/mad/flexprop/include/simpletools.h"
unsigned get_direction(int pin)  __fromfile("libsimpletools/getDirection.c") ;
unsigned get_directions(int startPin, int endPin)  __fromfile("libsimpletools/getDirections.c") ;
unsigned get_output(int pin)  __fromfile("libsimpletools/getOutput.c") ;
unsigned get_outputs(int startPin, int endPin)  __fromfile("libsimpletools/getOutputs.c") ;
unsigned get_states(int endPin, int startPin)  __fromfile("libsimpletools/getStates.c") ;
void set_directions(int endPin, int startPin, unsigned int pattern)  __fromfile("libsimpletools/setDirections.c") ;
void set_outputs(int endPin, int startPin, unsigned int pattern)  __fromfile("libsimpletools/setOutputs.c") ;

long count(int pin, long duration, int pinToCount = -1)  __fromfile("libsimpletools/count.c") ;

void dac_ctr(int pin, int channel, int dacVal)  __fromfile("libsimpletools/dac.c") ;
void dac_ctr_res(int bits)  __fromfile("libsimpletools/dac.c") ;
void dac_ctr_stop(void)  __fromfile("libsimpletools/dac.c") ;

void freqout(int pin, int msTime, int frequency)  __fromfile("libsimpletools/freqout.c") ;

int pwm_start(unsigned int cycleMicroseconds)  __fromfile("libsimpletools/pwm.c") ;
void pwm_set(int pin, int channel, int tHigh)  __fromfile("libsimpletools/pwm.c") ;
void pwm_stop(void)  __fromfile("libsimpletools/pwm.c") ;

long pulse_in(int pin, int state)  __fromfile("libsimpletools/pulseIn.c") ;
void pulse_out(int pin, int time)  __fromfile("libsimpletools/pulseOut.c") ;

long rc_time(int pin, int state)  __fromfile("libsimpletools/rcTime.c") ;

void square_wave(int pin, int channel, int freq)  __fromfile("libsimpletools/squareWave.c") ;
void square_wave_stop(void)  __fromfile("libsimpletools/squareWave.c") ;


void square_wave_stop_pin(int pin)  __fromfile("libsimpletools/squareWave.c") ;
#line 79 "/home/mad/flexprop/include/simpletools.h"
int int_fraction(int a, int b, int shift)  __fromfile("libsimpletools/squareWave.c") ;









int shift_in(int pinDat, int pinClk, int mode, int bits)  __fromfile("libsimpletools/shiftIn.c") ;
void shift_out(int pinDat, int pinClk, int mode, int bits, int value)  __fromfile("libsimpletools/shiftOut.c") ;


extern unsigned int st_buscnt;

i2c *i2c_newbus(int sclPin, int sdaPin, int sclDrive)  __fromfile("libsimpletools/i2c_init.c") ;
int i2c_out(i2c *busID, int i2cAddr, int memAddr, int memAddrCount, const unsigned char *data, int dataCount)  __fromfile("libsimpletools/i2c_out.c") ;
int i2c_in(i2c *busID, int i2cAddr, int memAddr, int memAddrCount, unsigned char *data, int dataCount)  __fromfile("libsimpletools/i2c_in.c") ;
int i2c_busy(i2c *busID, int i2cAddr)  __fromfile("libsimpletools/i2c_busy.c") ;


extern i2c *st_eeprom;
extern int st_eeInitFlag;
#line 114 "/home/mad/flexprop/include/simpletools.h"
void ee_config(int sclPin, int sdaPin, int sclDrive)  __fromfile("libsimpletools/eeprom_initSclDrive.c") ;
void ee_init()  __fromfile("libsimpletools/eeprom_init.c") ;
void ee_putByte(unsigned char value, int addr)  __fromfile("libsimpletools/eeprom_putByte.c") ;
char ee_getByte(int addr)  __fromfile("libsimpletools/eeprom_getByte.c") ;
void ee_putInt(int value, int addr)  __fromfile("libsimpletools/eeprom_putInt.c") ;
int ee_getInt(int addr)  __fromfile("libsimpletools/eeprom_getInt.c") ;
void ee_putStr(unsigned char *s, int n, int addr)  __fromfile("libsimpletools/eeprom_putStr.c") ;
unsigned char* ee_getStr(unsigned char* s, int n, int addr)  __fromfile("libsimpletools/eeprom_getStr.c") ;
void ee_putFloat32(float value, int addr)  __fromfile("libsimpletools/eeprom_putFloat.c") ;
float ee_getFloat32(int addr)  __fromfile("libsimpletools/eeprom_getFloat.c") ;

float constrainFloat(float value, float min, float max)  __fromfile("libsimpletools/constrainFloat.c") ;
int constrainInt(int value, int min, int max)  __fromfile("libsimpletools/constrainInt.c") ;

void endianSwap(void *resultAddr, void *varAddr, int byteCount)  __fromfile("libsimpletools/endianSwap.c") ;

float mapFloat(float value, float fromMin, float fromMax, float toMin, float toMax)  __fromfile("libsimpletools/mapFloat.c") ;
int mapInt(int value, int fromMin, int fromMax, int toMin, int toMax)  __fromfile("libsimpletools/mapInt.c") ;

int random(int limitLow, int limitHigh)  __fromfile("libsimpletools/random.c") ;


void cog_end(int *coginfo)  __fromfile("libsimpletools/cogend.c") ;
int cog_num(int *coginfo)  __fromfile("libsimpletools/cognum.c") ;
int* cog_run(void (*function)(void *par), int stacksize)  __fromfile("libsimpletools/cogrun.c") ;
#line 7 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"
#line 1 "/home/mad/flexprop/include/stdio.h"
#line 5 "/home/mad/flexprop/include/stdio.h"
#line 1 "/home/mad/flexprop/include/sys/size_t.h"
#line 6 "/home/mad/flexprop/include/stdio.h"
#line 1 "/home/mad/flexprop/include/sys/types.h"
#line 6 "/home/mad/flexprop/include/sys/types.h"
#line 1 "/home/mad/flexprop/include/sys/size_t.h"
#line 7 "/home/mad/flexprop/include/sys/types.h"
#line 1 "/home/mad/flexprop/include/sys/wchar_t.h"
#line 8 "/home/mad/flexprop/include/sys/types.h"
#line 1 "/home/mad/flexprop/include/time.h"
#line 7 "/home/mad/flexprop/include/time.h"
#line 1 "/home/mad/flexprop/include/sys/size_t.h"
#line 8 "/home/mad/flexprop/include/time.h"
#line 13 "/home/mad/flexprop/include/time.h"
typedef unsigned int clock_t;
#line 29 "/home/mad/flexprop/include/time.h"
typedef unsigned long time_t;




struct tm {
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};


    clock_t clock(void)  __fromfile("libc/sys/propeller/clock.c") ;
    time_t time(time_t *)  __fromfile("libc/time/time.c") ;
    double difftime(time_t time2, time_t time1)  __fromfile("libc/time/difftime.c") ;

    time_t mktime(struct tm *stm)  __fromfile("libc/time/localtim.c") ;

    struct tm *_gmtime_r(const time_t *t, struct tm *stm)  __fromfile("libc/time/localtim.c") ;
    struct tm *gmtime(const time_t *)  __fromfile("libc/time/localtim.c") ;
    struct tm *_localtime_r(const time_t *, struct tm *)  __fromfile("libc/time/localtim.c") ;
    struct tm *localtime(const time_t *)  __fromfile("libc/time/localtim.c") ;


    int _gettimezone(void)  __fromfile("libc/time/localtim.c") ;

    unsigned long  strftime(char *s,  unsigned long  max, const char *format, const struct tm *stm)  __attribute__((complexio))   __fromfile("libc/time/strftime.c") ;

    char *asctime(const struct tm *stm)  __attribute__((complexio))   __fromfile("libc/time/asctime.c") ;
    char *asctime_r(const struct tm *stm, char *buf)  __attribute__((complexio))   __fromfile("libc/time/asctime.c") ;
    char *ctime(const time_t *timep)  __attribute__((complexio))   __fromfile("libc/time/asctime.c") ;
    char *ctime_r(const time_t *timep, char *buf)  __attribute__((complexio))   __fromfile("libc/time/asctime.c") ;
#line 75 "/home/mad/flexprop/include/time.h"
    void _tzset(void)  __fromfile("libc/time/localtim.c") ;
#line 9 "/home/mad/flexprop/include/sys/types.h"


typedef long off_t;



typedef long ssize_t;



typedef int dev_t;
typedef int ino_t;
typedef unsigned int mode_t;

typedef unsigned short uid_t;
typedef unsigned short gid_t;

typedef int pid_t;

struct stat {
  int st_dev;
  int st_ino;
  unsigned int st_mode;
  int st_nlink;
  uid_t st_uid;
  gid_t st_gid;
  int st_rdev;
  long st_size;
  long st_blksize;
  long st_blocks;
  time_t st_atime;
  time_t st_mtime;
  time_t st_ctime;
};

typedef struct s_vfs_file_t vfs_file_t;

struct s_vfs_file_t {
    void *vfsdata;
    unsigned flags;
    unsigned state;
    int lock;
    ssize_t (*read)(vfs_file_t *fil, void *buf, size_t count);
    ssize_t (*write)(vfs_file_t *fil, const void *buf, size_t count);
    int (*putcf)(int c, vfs_file_t *fil);
    int (*getcf)(vfs_file_t *fil);
    int (*close)(vfs_file_t *fil);
    int (*ioctl)(vfs_file_t *fil, int arg, void *buf);
    int (*flush)(vfs_file_t *fil);
    off_t (*lseek)(vfs_file_t *fil, off_t offset, int whence);


    int putchar(int c) {
        int i;
        if (!putcf) return 0;
        i = putcf(c, __this); return (i < 0) ? 0 : 1;
    }
    int getchar(void) {
        if (!getcf) return -1;
        return getcf(__this);
    }
};

typedef int (*putcfunc_t)(int c, vfs_file_t *fil);
typedef int (*getcfunc_t)(vfs_file_t *fil);
#line 7 "/home/mad/flexprop/include/stdio.h"
#line 1 "/home/mad/flexprop/include/sys/limits.h"
#line 8 "/home/mad/flexprop/include/stdio.h"
#line 1 "/home/mad/flexprop/include/sys/vfs.h"
#line 4 "/home/mad/flexprop/include/sys/vfs.h"
#line 1 "/home/mad/flexprop/include/sys/types.h"
#line 5 "/home/mad/flexprop/include/sys/vfs.h"
#line 1 "/home/mad/flexprop/include/dirent.h"
#line 8 "/home/mad/flexprop/include/dirent.h"
struct dirent {
    char d_name[ (64) ];
    unsigned long d_off;
    unsigned long d_ino;
    unsigned long d_size;
    unsigned long d_mtime;
    unsigned char d_type;
};






typedef struct _dir {
    void *vfs;
    void *vfsdata;
    struct dirent dirent;
} DIR;

DIR *opendir(const char *name)  __fromfile("libc/unix/opendir.c") ;
int closedir(DIR *dir)  __fromfile("libc/unix/opendir.c") ;
struct dirent *readdir(DIR *dirp)  __fromfile("libc/unix/opendir.c") ;
#line 6 "/home/mad/flexprop/include/sys/vfs.h"

typedef DIR vfs_dir_t;
#line 11 "/home/mad/flexprop/include/sys/vfs.h"
struct vfs {

    int (*close)(vfs_file_t *fil);
    ssize_t (*read)(vfs_file_t *fil, void *buf, size_t siz);
    ssize_t (*write)(vfs_file_t *fil, const void *buf, size_t siz);
    off_t (*lseek)(vfs_file_t *fil, off_t offset, int whence);
    int (*ioctl)(vfs_file_t *fil, unsigned long req, void *argp);
    int (*flush)(vfs_file_t *fil);
    void *vfs_data;
    void *reserved;

    int (*open)(vfs_file_t *fil, const char *name, int flags);
    int (*creat)(vfs_file_t *fil, const char *pathname, mode_t mode);

    int (*opendir)(vfs_dir_t *dir, const char *name);
    int (*closedir)(vfs_dir_t *dir);
    int (*readdir)(vfs_dir_t *dir, struct dirent *ent);
    int (*stat)(const char *name, struct stat *buf);

    int (*mkdir)(const char *name, mode_t mode);
    int (*rmdir)(const char *name);

    int (*remove)(const char *pathname);
    int (*rename)(const char *oldname, const char *newname);

    int (*init)(const char *mountname);
    int (*deinit)(const char *mountname);
};

typedef struct vfs vfs_t;

int _openraw(void *f, const char *name, unsigned flags, unsigned perm)  __fromfile("libc/unix/posixio.c") ;
int _closeraw(void *f)  __fromfile("libc/unix/posixio.c") ;



struct vfs *_getrootvfs(void);
void _setrootvfs(struct vfs *);

struct vfs *_vfs_open_host(void)  __fromfile("filesys/fs9p/fs9p_vfs.c") ;
struct vfs *_vfs_open_sdcard(void)  __fromfile("filesys/fatfs/fatfs_vfs.c") ;
struct vfs *_vfs_open_sdcardx(int pclk = 61, int pss = 60, int pdi = 59, int pdo = 58)  __fromfile("filesys/fatfs/fatfs_vfs.c") ;
#line 64 "/home/mad/flexprop/include/sys/vfs.h"
struct _default_buffer {
    int cnt;
    unsigned char *ptr;
    unsigned flags;


    unsigned char buf[ 1024 ];
};

int __default_getc(vfs_file_t *f)  __fromfile("libc/unix/bufio.c") ;
int __default_putc(int c, vfs_file_t *f)  __fromfile("libc/unix/bufio.c") ;
int __default_putc_terminal(int c, vfs_file_t *f)  __fromfile("libc/unix/bufio.c") ;
int __default_flush(vfs_file_t *f)  __fromfile("libc/unix/bufio.c") ;


char *__getfilebuffer();
struct vfs *__getvfsforfile(char *fullname, const char *orig_name, char *full_path);
#line 9 "/home/mad/flexprop/include/stdio.h"
#line 1 "/home/mad/flexprop/include/unistd.h"
#line 2 "/home/mad/flexprop/include/unistd.h"
#line 1 "/home/mad/flexprop/include/sys/unistd.h"
#line 4 "/home/mad/flexprop/include/sys/unistd.h"
#line 1 "/home/mad/flexprop/include/sys/types.h"
#line 5 "/home/mad/flexprop/include/sys/unistd.h"
#line 22 "/home/mad/flexprop/include/sys/unistd.h"
  typedef unsigned int useconds_t;

  int open(const char *name, int flags, mode_t mode)  __attribute__((complexio))   __fromfile("libc/unix/posixio.c") ;
  int write(int fd, const void *buf, int count)  __fromfile("libc/unix/posixio.c") ;
  int read(int fd, void *buf, int count)  __fromfile("libc/unix/posixio.c") ;
  int close(int fd)  __fromfile("libc/unix/posixio.c") ;
  off_t lseek(int fd, off_t offset, int whence)  __fromfile("libc/unix/posixio.c") ;
  int ioctl(int fd, unsigned long req, void *argp)  __fromfile("libc/unix/ioctl.c") ;
  int access(const char *path, int mode)  __fromfile("libc/unix/access.c") ;







  int isatty(int fd)  __fromfile("libc/unix/isatty.c") ;

  char *getcwd(char *buf, int size)  __attribute__((complexio))   __fromfile("libc/unix/_mount.c") ;
  int chdir(const char *path)  __attribute__((complexio))   __fromfile("libc/unix/_mount.c") ;
  int rmdir(const char *path)  __attribute__((complexio))   __fromfile("libc/unix/posixio.c") ;
  int mkdir(const char *path, int mode)  __attribute__((complexio))   __fromfile("libc/unix/posixio.c") ;

  int unlink(const char *path)  __attribute__((complexio))   __fromfile("libc/unix/posixio.c") ;
  int chown(const char *pathname, uid_t owner, gid_t group)  __fromfile("libc/unix/posixio.c") ;
  int chmod(const char *pathname, mode_t mode)  __fromfile("libc/unix/posixio.c") ;

  unsigned int sleep(unsigned int seconds)  __fromfile("libc/time/sleep.c") ;
  int usleep(useconds_t usec)  __fromfile("libc/time/usleep.c") ;

  char *_mktemp(char *templ);
  char *mktemp(char *);

  const char **_get_environ_ptr()  __fromfile("libc/stdlib/getenv.c") ;
  void _put_environ_ptr(const char **ptr)  __fromfile("libc/stdlib/getenv.c") ;





    int _execve(const char *path, char **args, char **env)  __attribute__((complexio))   __fromfile("libc/unix/exec.c") ;
#line 3 "/home/mad/flexprop/include/unistd.h"
#line 10 "/home/mad/flexprop/include/stdio.h"
#line 27 "/home/mad/flexprop/include/stdio.h"
typedef vfs_file_t FILE;
typedef struct string_file_t {
    FILE file;
    const char *ptr;
    size_t pos;
    size_t len;
} _STRING_FILE;

FILE *__getftab(int i)  __fromfile("libc/unix/posixio.c") ;







int fputc(int c, FILE *f)  __fromfile("libc/stdio/fputs.c") ;
int fgetc(FILE *f)  __fromfile("libc/stdio/fputs.c") ;




int sprintf(char *str, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/sprintf.c") ;
int snprintf(char *str, size_t size, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/sprintf.c") ;
int printf(const char *format, ...)  __fromfile("libc/stdio/fprintf.c") ;
int fprintf(FILE *f, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/fprintf.c") ;

int vsprintf(char *str, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/sprintf.c") ;
int vsnprintf(char *str, size_t size, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/sprintf.c") ;
int vprintf(const char *format, unsigned long ap)  __fromfile("libc/stdio/fprintf.c") ;
int vfprintf(FILE *f, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/fprintf.c") ;

int vscanf(const char *format, unsigned long ap)  __fromfile("libc/stdio/vscanf.c") ;
int vsscanf(char *str, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/sscanf.c") ;
int vfscanf(FILE *f, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/vfscanf.c") ;

int scanf(const char *format, ...)  __fromfile("libc/stdio/scanf.c") ;
int sscanf(char *str, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/sscanf.c") ;
int fscanf(FILE *f, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/fscanf.c") ;

int fputs(const char *s, FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fputs.c") ;
int puts(const char *s)  __fromfile("libc/stdio/fputs.c") ;

char *gets(char *data)  __fromfile("libc/stdio/gets.c") ;
char *fgets(char *buf, int size, FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fgets.c") ;

FILE *fopen(const char *name, const char *mode)  __attribute__((complexio))   __fromfile("libc/stdio/fopen.c") ;
FILE *__string_file(_STRING_FILE *fp, const char *str, const char *mode, size_t len)  __attribute__((complexio))   __fromfile("libc/stdio/stringio.c") ;

int fclose(FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fopen.c") ;
int fflush(FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fflush.c") ;
size_t fwrite(const void *ptr, size_t size, size_t n, FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fwrite.c") ;
size_t fread(void *ptr, size_t size, size_t n, FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fwrite.c") ;

void clearerr(FILE *f)  __fromfile("libc/stdio/clearerr.c") ;
void perror(const char *s)  __fromfile("libc/stdio/perror.c") ;

int fileno(FILE *f)  __fromfile("libc/stdio/fileno.c") ;

int fseek(FILE *f, long offset, int whence)  __fromfile("libc/stdio/fseek.c") ;
long ftell(FILE *f)  __fromfile("libc/stdio/fseek.c") ;

int remove(const char *pathname)  __fromfile("libsys/remove.c") ;









int rename(const char *oldpath, const char *newpath)  __fromfile("libc/unix/rename.c") ;
#line 8 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"
#line 1 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/JSON/JSON.h"
#line 17 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/lib/JSON/JSON.h"
typedef struct MachineConfiguration
{
    char motorType[ 20 ];
    double maxMotorTorque;
    double maxMotorRPM;
    double gearDiameter;
    double gearPitch;
    double systemIntertia;
    double staticTorque;
    double load;
    char positionEncoderType[ 20 ];
    double positionEncoderStepsPerRev;
    char forceGauge[ 20 ];
    double forceGaugeScaleFactor;
    int forceGaugeZeroFactor;
} MachineConfiguration;

typedef struct MachinePerformance
{
    double minPosition;
    double maxPosition;
    double maxVelocity;
    double maxAcceleration;
    double maxForceTensile;
    double maxForceCompression;
    double forceGaugeNeutralOffset;
} MachinePerformance;

typedef struct MachineProfile
{
    char name[ 20 ];
    MachineConfiguration configuration;
    MachinePerformance performance;
} MachineProfile;

typedef struct SampleProfile
{
    char name[ 50 ];
    double length;
    double stretchMax;
    double maxVelocity;
    double maxAcceleration;
    double maxJerk;
    double maxForceTensile;
    double maxForceCompression;

} SampleProfile;
#line 9 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"
#line 1 "/home/mad/flexprop/include/propeller.h"
#line 13 "/home/mad/flexprop/include/propeller.h"
#line 1 "/home/mad/flexprop/include/cog.h"
#line 14 "/home/mad/flexprop/include/propeller.h"
#line 1 "/home/mad/flexprop/include/stdint.h"
#line 15 "/home/mad/flexprop/include/propeller.h"
#line 22 "/home/mad/flexprop/include/propeller.h"
#line 1 "/home/mad/flexprop/include/propeller2.h"
#line 23 "/home/mad/flexprop/include/propeller.h"
#line 10 "/home/mad/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Utility/Monitor.c"


static long monitor_stack[ 3000 ];

extern long motion_position_steps;
static ForceGauge forceGauge;
static Encoder encoder;

_Bool  monitorLogData;


MachineProfile sd_card_profile;
int read_profile_status = 0;
MonitorData sd_card_data[255];
int read_data_index = -1;
int read_data_count = 0;

static  _Bool  get_force(ForceGauge *forceGauge, MachineState *state, int lastLog)
{
  if (forceGauge->responding)
  {
    return forceGauge->counter != lastLog;
  }

  force_gauge_stop(forceGauge);
  if (force_gauge_begin(forceGauge,  15 ,  16 ))
  {

    state_machine_set(state, PARAM_MACHINE_FORCE_GAUGE_COM,  (1) );
  }
  else
  {

    state_machine_set(state, PARAM_MACHINE_FORCE_GAUGE_COM,  (0) );
  }
  return  (0) ;
}

static void read_sd()
{
  if (read_data_index != -1)
    {
      FILE *file = fopen("/sd/test.txt", "r");
      if (file !=  (0) )
      {
        fseek(file, read_data_index * sizeof(MonitorData),  0 );
        int n = fread(sd_card_data, sizeof(MonitorData), read_data_count, file);
        __builtin_printf ("Read test data: %d\n",sd_card_data[0].log);
        fclose(file);
        read_data_count = n/sizeof(MonitorData);
        if (read_data_count == 0)
        {

        }
        read_data_index = -1;
      }
      else
      {

      }
    }
    else if (read_data_count == -1)
    {
      FILE *file = fopen("/sd/test.txt", "r");
      if (file !=  (0) )
      {
        fseek(file, 0,  2 );
        int size = ftell(file);
        read_data_count = size / sizeof(MonitorData);
        fclose(file);
      }
      else
      {
        read_data_count = 0;
      }
    }
    else if (read_profile_status == 1)
    {
      FILE *file_config_read = fopen("/sd/config.txt", "r");
      if (file_config_read !=  (0) )
      {
        int n = fread(&sd_card_profile, sizeof(MachineProfile), 1, file_config_read);
        fclose(file_config_read);
        if (n != sizeof(MachineProfile))
        {

          read_profile_status = -1;
        }
        else
        {
          read_profile_status = 0;
        }
      }
      else
      {

        read_profile_status = -1;
      }
      __builtin_printf ("read_profile_status: %s\n", sd_card_profile.name);
    }
    else if (read_profile_status == 2)
    {
      FILE *file = fopen("/sd/config.txt", "w");
      if (file !=  (0) )
      {
        int n = fwrite(&sd_card_profile, sizeof(MachineProfile), 1, file);
        if (n != sizeof(MachineProfile))
        {

          read_profile_status = -1;
        }
        else
        {
          read_profile_status = 0;
        }
        fclose(file);
      }
      else
      {

        read_profile_status = -1;
      }
    }
}


static void monitor_cog(Monitor *monitor)
{
  FILE *testFile =  (0) ;
  monitor->data.log = 0;


  encoder.start( 20 ,  19 , -1,  (0) , 0, -100000, 100000);
  long lastTime = _getms();
  while (1)
  {
    long start = _getus();
    _Bool  update =  (0) ;

    if (get_force(&forceGauge, monitor->machineState, monitor->data.log))
    {

      monitor->data.log = forceGauge.counter;
      monitor->data.forceRaw = forceGauge.forceRaw;
      update =  (1) ;
    }
    else
    {
      monitor->data.forceRaw = 0;
    }

    long forceus = _getus() - start;
    monitor->data.encoderRaw = encoder.value();
    monitor->data.timems = _getms();
    monitor->data.timeus = _getus();
    monitor->data.forcemN = raw_to_force(monitor->data.forceRaw, monitor->configuration);
    monitor->data.encoderum = steps_to_um(monitor->data.encoderRaw, monitor->configuration);

    monitor->data.force = raw_to_force(monitor->data.forceRaw, monitor->configuration) / 1000.0;

    monitor->data.position = steps_to_mm(monitor->data.encoderRaw, monitor->configuration);
    monitor->data.setpoint = motion_position_steps;

    long encoderus = _getus() - start - forceus;

    if (monitorLogData)
    {
      if (testFile ==  (0) )
      {
        testFile = fopen("/sd/test.txt", "w");

      }
      if (update && testFile !=  (0) )
      {

        fwrite(&(monitor->data), sizeof(MonitorData), 1, testFile);
      }
    }
    else if (testFile !=  (0) )
    {
      fclose(testFile);
      testFile =  (0) ;

    }
    else
    {
      read_sd();
    }
    _waitms(1);
  }
}

_Bool  read_sd_profile(MachineProfile * profile)
{
  long startms = _getms();
  if (monitorLogData)
  {
    return  (0) ;
  }
  read_profile_status = 1;
  while (read_profile_status != 0)
  {
    if (read_profile_status == -1)
    {


      return  (0) ;
    }
    if (_getms() - startms > 5000)
    {


      return  (0) ;
    }
  }
  memcpy(profile, &sd_card_profile, sizeof(MachineProfile));
  return  (1) ;
}

_Bool  write_sd_profile(MachineProfile * profile)
{
  long startms = _getms();
  if (monitorLogData)
  {
    return  (0) ;
  }
  memcpy(&sd_card_profile, profile, sizeof(MachineProfile));
  read_profile_status = 2;
  while(read_profile_status != 0)
  {
    if (read_profile_status == -1)
    {

      return  (0) ;
    }
    if (_getms() - startms > 1000)
    {


      return  (0) ;
    }
  }
  return  (1) ;
}

int read_sd_card_data(MonitorData *data, int index, int count)
{
  long startms = _getms();
  if (monitorLogData)
  {

    return 0;
  }
  read_data_count = count;
  read_data_index = index;
  while (read_data_index != -1)
  {
    if (read_data_index == -2)
    {


      return 0;
    }
    if (_getms() - startms > 1000)
    {


      return  (0) ;
    }
  }
  memcpy(data, sd_card_data, sizeof(MonitorData)*read_data_count);

  return read_data_count;
}

int read_data_size()
{
  long startms = _getms();
  if (monitorLogData)
  {
    return 0;
  }
  read_data_count = -1;
  while (read_data_count == -1)
  {
    if (_getms() - startms > 1000)
    {


      return 0;
    }
  }
  return read_data_count;
}

_Bool  monitor_begin(Monitor *monitor, MachineState *machineState, MachineConfiguration *configuration, int sampleRate)
{
  monitor->configuration = configuration;
  monitor->sampleRate = sampleRate;
  monitor->machineState = machineState;
  monitor_cog(monitor);
  return
  monitor->cogid =  __builtin_cogstart(monitor_cog(monitor), &monitor_stack[0]) ;
  if (monitor->cogid != -1)
  {
    return  (1) ;
  }
  return  (0) ;
}
